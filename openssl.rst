Working with openssl
====================

Creating a custom CA
--------------------

Generate a 2048-bit root CA RSA key, and self-sign it:

.. code-block:: bash
  $ openssl genrsa -out ca.key 2048
  $ openssl req -x509 -new -sha256 -nodes -key ca.key  -days 3650 -out ca.crt -subj "/C=mycountry/L=mylocation/O=myorg/CN=demo"

Verify the certificate:

.. code-block:: bash
  $ openssl x509 -in ca.crt -inform PEM -noout -text

Creating certificates using own CA
----------------------------------

Generate host key, and create a certificate signing request that will be signed with our own CA.

.. code-block:: bash
  $ openssl genrsa -out host.key 2048
  $ openssl req -new -key host.key -out host.csr -nodes -subj "/C=Country/L=Location/O=Organization/CN=common.name.com" -addext "subjectAltName = DNS:common.name.com"
  $ openssl x509 -req -sha256 -in host.csr -CA ca.crt -CAkey ca.key -out host.crt -days 730 -extfile <(printf "subjectAltName=DNS:common.name.com")

It's also possible to use IP addresses directly (although not recommended) instead of a FQDN. This could be valid option in an internal/private home network for instance if you don't want to set up a private facing DNS server (or edit the hosts file on all pertinent machines).

.. code-block:: bash
  $ openssl req -new -key host.key -out host.csr -nodes -subj "/C=Country/L=Location/O=Organization/CN=192.168.1.100" -addext "subjectAltName = IP:192.168.1.100"
  $ openssl x509 -req -sha256 -in host.csr -CA ca.crt -CAkey ca.key -out host.crt -days 730 -extfile <(printf "subjectAltName=IP:192.168.1.100")

Lastly, it is recommended to keep track of all the serial numbers generated by the CA. To do so, use the `-CAcreateserial` or `-CAserial` option in the x509 certificate request.

